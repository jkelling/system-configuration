[package]
name        = "holodeck-damogran"
version     = "20160603.1"
description = "holodeck: services on Damogran"

requires = [
    "hologram-base-accessible",
    "hologram-multimedia-base",
    "hologram-damogran-dyndns",
    "hologram-damogran-audio",
    "hologram-remount-efivarfs",
    # boot loader (no intel-ucode since Damogran has an AMD CPU and chipset)
    "gummiboot",
    # network setup (local DHCP, local DNS, wireless AP, NAT from internal networks to external internet)
    "dnsmasq",
    "hostapd",
    "iptables",
    # public services
    "hologram-nginx",
    # intranet services
    "jre7-openjdk-headless", # for Minecraft
]

# break cyclic dependency between dnsmasq and adblock-sync with an initial
# empty host list (dnsmasq needs the host list generated by adblock-sync, which
# can only download the public host lists when dnsmasq is running)
setupScript = """
    if [ ! -f /var/cache/adblock/hosts.txt ]; then
        touch /var/cache/adblock/hosts.txt
        chown dnsmasq:dnsmasq /var/cache/adblock/hosts.txt
    fi
"""

# TODO: smartd to monitor RAID
# TODO: setup for Minecraft server

################################################################################
# identity

[[file]]
path    = "/etc/hostname"
content = "damogran"

[[file]]
path    = "/etc/profile.d/prettyprompt.sh"
content = """
export PRETTYPROMPT_COMMONUSER=stefan
export PRETTYPROMPT_HOSTCOLOR='0;35'
"""

################################################################################
# boot loader (systemd-boot)

[[file]]
path    = "/boot/loader/loader.conf"
content = """
    default arch
    timeout 1
"""

[[file]]
path    = "/boot/loader/entries/arch.conf"
content = """
    title     Arch Linux
    linux     /vmlinuz-linux
    initrd    /initramfs-linux.img
    options   root=PARTUUID=${DAMOGRAN_ROOT_PARTUUID} rw
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/boot/loader/entries/arch.conf.holoscript"
target = "/my/variables"

################################################################################
# network setup: systemd-{networkd,resolved} to configure interfaces and upstream DNS

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/systemd-resolved.service"
target = "/usr/lib/systemd/system/systemd-resolved.service"

[[file]]
path    = "/etc/systemd/network/lan.network"
content = """
    [Match]
    Name=${DAMOGRAN_IFACE_LAN}

    [Network]
    Description=Internal LAN
    Address=10.0.0.1/24
    IPForward=ipv4

    [Address]
    # blackhole IP (traffic to this subnet is rejected)
    Address=10.0.13.13/32
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/systemd/network/lan.network.holoscript"
target = "/my/variables"

[[file]]
path    = "/etc/systemd/network/wlan.network"
content = """
    [Match]
    Name=${DAMOGRAN_IFACE_WLAN}

    [Network]
    Description=Internal Wireless LAN
    Address=10.0.1.1/24
    IPForward=ipv4
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/systemd/network/wlan.network.holoscript"
target = "/my/variables"

[[file]]
path    = "/etc/systemd/network/wan.network"
content = """
    [Match]
    Name=${DAMOGRAN_IFACE_WAN}

    [Network]
    Description=External Network (Internet)
    DHCP=ipv4
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/systemd/network/wan.network.holoscript"
target = "/my/variables"

################################################################################
# network setup: an iptables ruleset acts as firewall

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/iptables.service"
target = "/usr/lib/systemd/system/iptables.service"

[[file]]
path = "/etc/sysctl.d/90-firewall.conf"
content = """
    # filter spoofing of local source addresses from internet locations
    net.ipv4.conf.all.rp_filter = 1
    # enable IPv4 forwarding (NAT)
    net.ipv4.ip_forward = 1
    net.ipv4.conf.all.forwarding = 1
    net.ipv4.conf.default.forwarding = 1
    net.ipv4.conf.${DAMOGRAN_IFACE_LAN}.forwarding = 1
    net.ipv4.conf.${DAMOGRAN_IFACE_WLAN}.forwarding = 1
    net.ipv4.conf.${DAMOGRAN_IFACE_WAN}.forwarding = 1

    # disable IPv6 for internet-facing interfaces
    net.ipv6.conf.${DAMOGRAN_IFACE_WAN}.disable_ipv6 = 1
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/sysctl.d/90-firewall.conf.holoscript"
target = "/my/variables"

[[file]]
path = "/etc/iptables/iptables.rules"
content = """
    *filter

    # standard chains
    :INPUT DROP [0:0]
    :FORWARD DROP [0:0]
    :OUTPUT ACCEPT [0:0]
    # chains for accepting incoming connections
    :TCP - [0:0]
    :UDP - [0:0]



    # accept traffic on established connections
    -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    # accept all local traffic
    -A INPUT -i lo -j ACCEPT
    # drop all invalid traffic (esp. to avoid attacks from the internet)
    -A INPUT -m conntrack --ctstate INVALID -j DROP
    # accept pings from everywhere
    -A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
    # block traffic to blackhole IP
    -A INPUT --dest 10.0.13.13 -j REJECT --reject-with icmp-port-unreachable
    # attach chains for checking incoming connections
    -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
    -A INPUT -p tcp -m tcp --syn -m conntrack --ctstate NEW -j TCP
    # reject unwanted connections
    -A INPUT -p tcp -j REJECT --reject-with tcp-reset
    -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
    -A INPUT -j REJECT --reject-with icmp-proto-unreachable

    # allow public SSH
    -A TCP -p tcp -m tcp --dport 22 -j ACCEPT
    # allow public HTTP(S)
    -A TCP -p tcp -m tcp --dport 80 -j ACCEPT
    -A TCP -p tcp -m tcp --dport 443 -j ACCEPT
    # allow intranet PulseAudio
    -A TCP -i ${DAMOGRAN_IFACE_WLAN} -p tcp -m tcp --dport 4713 -j ACCEPT
    -A TCP -i ${DAMOGRAN_IFACE_LAN} -p tcp -m tcp --dport 4713 -j ACCEPT
    # allow intranet MPD
    -A TCP -i ${DAMOGRAN_IFACE_WLAN} -p tcp -m tcp --dport 6600 -j ACCEPT
    -A TCP -i ${DAMOGRAN_IFACE_LAN} -p tcp -m tcp --dport 6600 -j ACCEPT
    # allow public Minecraft
    -A TCP -p tcp -m tcp --dport 25565 -j ACCEPT

    # allow intranet DNS
    -A UDP -i ${DAMOGRAN_IFACE_WLAN} -p udp -m udp --dport 53 -j ACCEPT
    -A UDP -i ${DAMOGRAN_IFACE_LAN} -p udp -m udp --dport 53 -j ACCEPT
    # allow intranet DHCP
    -A UDP -i ${DAMOGRAN_IFACE_WLAN} -p udp -m udp --sport 67:68 --dport 67:68 -j ACCEPT
    -A UDP -i ${DAMOGRAN_IFACE_LAN} -p udp -m udp --sport 67:68 --dport 67:68 -j ACCEPT
    # allow intranet MDNS (for PulseAudio)
    -A UDP -i ${DAMOGRAN_IFACE_WLAN} -p udp -m udp --dport 5353 -j ACCEPT
    -A UDP -i ${DAMOGRAN_IFACE_LAN} -p udp -m udp --dport 5353 -j ACCEPT



    # accept traffic on established connections
    -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    # accept forwarding connections from intranet to public
    -A FORWARD -i ${DAMOGRAN_IFACE_WLAN} -j ACCEPT
    -A FORWARD -i ${DAMOGRAN_IFACE_LAN} -j ACCEPT
    # reject unwanted connections
    -A FORWARD -j REJECT --reject-with icmp-host-unreachable

    COMMIT
    *nat

    # standard chains for NAT
    :PREROUTING ACCEPT [0:0]
    :INPUT ACCEPT [0:0]
    :OUTPUT ACCEPT [0:0]
    :POSTROUTING ACCEPT [0:0]

    # establish forwarding connections from intranet (IP range) to public (${DAMOGRAN_IFACE_WAN})
    -A POSTROUTING -s 10.0.0.0/24 -o ${DAMOGRAN_IFACE_WAN} -j MASQUERADE
    -A POSTROUTING -s 10.0.1.0/24 -o ${DAMOGRAN_IFACE_WAN} -j MASQUERADE

    COMMIT
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/iptables/iptables.rules.holoscript"
target = "/my/variables"

################################################################################
# network setup: hostapd to provide the WiFi access point

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/hostapd.service"
target = "/usr/lib/systemd/system/hostapd.service"

[[file]]
path    = "/etc/hostapd/hostapd.conf"
content = """
    # specify the wireless interface to operate on
    interface=${DAMOGRAN_IFACE_WLAN}
    driver=nl80211
    # enable 802.11g base functionality (n comes on top of g)
    hw_mode=g
    channel=8
    # enable 802.11n
    ieee80211n=1
    wmm_enabled=1
    # HT capabilities as detected by `iw list` and translated by the reference hostapd.conf
    ht_capab=[HT40][SHORT-GI-20][SHORT-GI-40][TX-STBC][RX-STBC1][DSSS_CCK-40]
    # enable 802.11d (advertisement of allowed channels and transmit power levels in
    # this regulatory domain)
    ieee80211d=1
    country_code=DE

    # broadcast the network ID
    ssid2="${DAMOGRAN_WLAN_SSID}"
    ignore_broadcast_ssid=0
    # enable WPA2 encryption
    auth_algs=3
    wpa=2
    wpa_passphrase=${DAMOGRAN_WLAN_PSK}
    wpa_key_mgmt=WPA-PSK
    wpa_pairwise=CCMP
    rsn_pairwise=CCMP

    # limit number of "stations" (connected clients) for good measure
    max_num_sta=20

    # log to stdout (all modules, above level 2 = informational messages)
    logger_stdout=-1
    logger_stdout_level=2
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/hostapd/hostapd.conf.holoscript"
target = "/my/variables"

################################################################################
# network setup: dnsmasq to provide DHCP and DNS in the internal networks

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/dnsmasq.service"
target = "/usr/lib/systemd/system/dnsmasq.service"

[[file]]
path    = "/etc/systemd/system/dnsmasq.service.d/reorder.conf"
content = """
    [Unit]
    After=systemd-resolved.service
    Requires=systemd-resolved.service
"""

[[file]]
path    = "/usr/share/holo/files/50-damogran/etc/dnsmasq.conf"
content = """
    # bind DHCP and DNS servers to all interfaces except external internet
    bind-interfaces
    except-interface=${DAMOGRAN_IFACE_WAN}

    # allocate IPv4 ranges for DHCP
    dhcp-range=10.0.0.100,10.0.0.199,12h
    dhcp-range=10.0.1.100,10.0.1.199,12h
    # assign a static IP address to Krikkit
    dhcp-host=${KRIKKIT_MACADDR_LAN},10.0.0.3

    # obtain upstream DNS from systemd-resolved
    resolv-file=/run/systemd/resolve/resolv.conf
    # local DNS overrides
    address=/damogran.local/10.0.0.1
    address=/arcturus.local/10.0.0.2
    address=/krikkit.local/10.0.0.3
    dnssec
    trust-anchor=.,19036,8,2,49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5

    # adblock
    addn-hosts=/var/cache/adblock/hosts.txt
"""
[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/dnsmasq.conf.holoscript"
target = "/my/variables"

################################################################################
# network setup: DNS-level adblocking using dnsmasq

[[file]]
path    = "/usr/lib/adblock-sync.sh"
mode    = "0755"
content = '''
    #!/bin/bash
    cd /var/cache/adblock/

    # source: https://github.com/pi-hole/pi-hole/blob/963eacfe0537a7abddf30441c754c67ca1e40965/gravity.sh
    sources=(
        'https://adaway.org/hosts.txt'
        'http://adblock.gjtech.net/?format=unix-hosts'
        # 'http://adblock.mahakala.is/'
        'http://hosts-file.net/.%5Cad_servers.txt'
        'http://www.malwaredomainlist.com/hostslist/hosts.txt'
        'http://pgl.yoyo.org/adservers/serverlist.php?'
        'http://someonewhocares.org/hosts/hosts'
        'http://winhelp2002.mvps.org/hosts.txt'
    )

    # query all sources
    i=0
    for s in ${sources[@]}; do
        i=$((i+1))
        wget -O hosts-$i.txt.new "$s" && mv hosts-$i.txt.new hosts-$i.txt
    done

    # select hostnames from hosts files (sed removes the IP, removes comments and trailing whitespace)
    for file in hosts-?.txt; do
        grep -E '^(127\.0\.0\.1|0\.0\.0\.0)\s' $file | sed 's/^\S*\s\+//;s/#.*//;s/\s\+$//'
    # now generate a single addn-hosts file (sed adds the target, a blackhole IP configured on this host)
    done | sort -u | grep -Ev '^local(host(.localdomain)?)?$' | sed 's/^/10.0.13.13 /' > hosts.txt
'''

[[directory]]
path  = "/var/cache/adblock"
owner = "dnsmasq"
group = "dnsmasq"

[[file]]
path    = "/usr/lib/systemd/system/adblock-sync.service"
content = """
    [Unit]
    Description=Generate domain-level adblock list
    After=network-online.target

    [Service]
    Type=oneshot
    ExecStart=/usr/lib/adblock-sync.sh
    ExecStartPost=/usr/bin/systemctl reload dnsmasq.service
    User=dnsmasq
    PermissionsStartOnly=true
"""

[[file]]
path    = "/usr/lib/systemd/system/adblock-sync.timer"
content = """
    [Unit]
    Description=Renew domain-level adblock list weekly
    After=network-online.target dnsmasq.service
    Wants=network-online.target dnsmasq.service

    [Timer]
    OnBootSec=10s
    OnUnitActiveSec=1w

    [Install]
    WantedBy=timers.target
"""

[[symlink]]
path   = "/etc/systemd/system/timers.target.wants/adblock-sync.timer"
target = "/usr/lib/systemd/system/adblock-sync.timer"

################################################################################
# public web server

# TODO: split further
[[file]]
path    = "/etc/nginx/sites-enabled/damogran.conf"
content = """
    server {
        server_name repo.holocm.org;
        include     /etc/nginx/server-baseline-https.inc;

        add_header Content-Security-Policy "default-src 'self'" always;

        ssl_certificate     /etc/letsencrypt/live/repo.holocm.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/repo.holocm.org/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/repo.holocm.org/chain.pem;

        location / {
            root  /srv/http/repo.holocm.org;
            index index.html index.htm;
            autoindex on;
        }
    }

    server {
        server_name static.${DAMOGRAN_HTTP_PRIVATE_DOMAIN};
        include     /etc/nginx/server-baseline-https.inc;

        add_header  Content-Security-Policy "default-src 'self' 'unsafe-inline'" always; # unsafe-inline for <style> tag to work

        ssl_certificate     /etc/letsencrypt/live/static.${DAMOGRAN_HTTP_PRIVATE_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/static.${DAMOGRAN_HTTP_PRIVATE_DOMAIN}/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/static.${DAMOGRAN_HTTP_PRIVATE_DOMAIN}/chain.pem;

        location / {
            root  /srv/http/static.${DAMOGRAN_HTTP_PRIVATE_DOMAIN};
            index index.html index.htm;
        }
    }
"""

[[symlink]]
path   = "/usr/share/holo/files/50-damogran-vars/etc/nginx/sites-enabled/damogran.conf.holoscript"
target = "/my/variables"

################################################################################
# public web server: letsencrypt integration

[[file]]
path    = "/etc/systemd/system/letsencrypt-allofthem.timer.d/after-dyndns.conf"
content = """
    [Unit]
    After=gandi-dyndns.service
    Wants=gandi-dyndns.service
"""

# take an automatic backup of /etc/letsencrypt every three days
[[file]]
path    = "/usr/lib/letsencrypt-backup.sh"
mode    = "0755"
content = """
    #!/bin/sh
    cd /
    mkdir -p /raid/data/backup-etc-letsencrypt
    chmod 0700 /raid/data/backup-etc-letsencrypt
    chown root:root /raid/data/backup-etc-letsencrypt
    tar cJf /raid/data/backup-etc-letsencrypt/$(date +%F).tar.xz /etc/letsencrypt
"""

[[file]]
path    = "/usr/lib/systemd/system/letsencrypt-backup.service"
content = """
    [Unit]
    Description=Backup /etc/letsencrypt

    [Service]
    Type=oneshot
    ExecStart=/usr/lib/letsencrypt-backup.sh
"""

[[file]]
path    = "/usr/lib/systemd/system/letsencrypt-backup.timer"
content = """
    [Unit]
    Description=Backup /etc/letsencrypt once a day

    [Timer]
    OnBootSec=3h
    OnUnitActiveSec=3d

    [Install]
    WantedBy=timers.target
"""

[[symlink]]
path   = "/etc/systemd/system/timers.target.wants/letsencrypt-backup.timer"
target = "/usr/lib/systemd/system/letsencrypt-backup.timer"
