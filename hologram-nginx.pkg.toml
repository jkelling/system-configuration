[package]
name        = "hologram-nginx"
version     = "1.3.3"
description = "Modular baseline configuration for nginx with sane defaults"
requires    = [
    "nginx",
    "hologram-letsencrypt",
]
provides    = [ "webserver-for-acme-challenge" ]

################################################################################
# nginx baseline configuration

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/nginx.service"
target = "/usr/lib/systemd/system/nginx.service"

[[file]]
path    = "/etc/nginx/server-baseline-https.inc"
content = """
    # This file sets sane defaults for all the TLS shebang, so just include it
    # for every "server" directive that is TLS-enabled. Use like this:
    #
    #     server_name             $host;
    #     include                 /etc/nginx/server-baseline-tls.inc;
    #
    #     ssl_certificate         /etc/letsencrypt/live/$host/fullchain.pem;
    #     ssl_certificate_key     /etc/letsencrypt/live/$host/privkey.pem;
    #     ssl_trusted_certificate /etc/letsencrypt/live/$host/chain.pem;
    #
    # It's also recommended to set a Content-Security-Policy that's appropriate
    # for the service in question. For example:
    #
    #     add_header Content-Security-Policy "default-src 'self'" always;
    #

    # IPv4
    listen 443 ssl;
    # IPv6
    listen [::]:443 ssl;

    ssl on;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # source esp. for cipher suite selection: https://wiki.mozilla.org/Security/Server_Side_TLS
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

    # recommended HTTP headers according to https://securityheaders.io
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always; # six months
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # NOTE: generate this with `sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048`
    ssl_dhparam /etc/nginx/dhparam.pem;

    # activate OCSP stapling (source: https://github.com/letsencrypt/letsencrypt/blob/master/letsencrypt-nginx/letsencrypt_nginx/configurator.py)
    ssl_stapling on;
    ssl_stapling_verify on;

    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
"""

# make the default /etc/nginx/nginx.conf more modular by linking to /etc/nginx/sites-enabled
[[file]]
path    = "/usr/share/holo/files/00-base/etc/nginx/nginx.conf"
content = """
    user http;
    worker_processes 1;
    events {
        worker_connections 1024;
    }

    http {
        include mime.types;
        default_type application/octet-stream;

        sendfile on;
        keepalive_timeout 65;
        access_log off;

        include /etc/nginx/sites-enabled/*.conf;

        server {
            # IPv4
            listen 80 default_server;
            # IPv6
            listen [::]:80 default_server;

            # forward all HTTP requests to HTTPS...
            location / {
                return 301 https://$host$request_uri;
            }
            # ...except for ACME challenges
            location /.well-known/acme-challenge/ {
                root /srv/letsencrypt;
            }
        }
    }
"""

[[directory]]
path = "/etc/nginx/sites-available"

[[directory]]
path = "/etc/nginx/sites-enabled"

# all domains mentioned in /etc/nginx/sites-enabled and
# /etc/nginx/sites-available are relevant for letsencrypt-allofthem
#
# TODO: There's a small ugliness here. letsencrypt-allofthem needs nginx for
# the webroot challenge, but nginx won't start if its certs are missing. As a
# workaround, move all offending server configs from sites-enabled
# sites-available temporarily.
[[file]]
path = "/etc/letsencrypt-allofthem/nginx.sh"
mode = "0755"
content = '''
    #!/bin/sh
    find /etc/nginx/sites-{available,enabled} -name \*.conf -exec cat {} + | grep -o '/etc/letsencrypt/live/[^/]\+' | cut -d/ -f5 | sort -u
'''
