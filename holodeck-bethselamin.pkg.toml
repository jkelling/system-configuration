[package]
name        = "holodeck-bethselamin"
version     = "1.9.3"
description = "holodeck: services on Bethselamin"

requires = [
    "hologram-base-hetzner",
    "ferm",
    "grub",
    # web services
    "hologram-nginx",
    "ages-website",
    "gogs",
    "sqlite", # for gogs
    "todolist",
    "blog-generator",
    # additional services
    "hologram-bethselamin-prosody",
    "murmur",
]

################################################################################
# identity

[[file]]
path    = "/etc/hostname"
content = "bethselamin"

[[file]]
path    = "/etc/profile.d/prettyprompt.sh"
content = """
    export PRETTYPROMPT_COMMONUSER=stefan
    export PRETTYPROMPT_HOSTCOLOR='0;31'
"""

################################################################################
# network interface configuration as generated by Hetzner's installimage

[[file]]
path    = "/etc/systemd/network/50-hetzner.network"
content = """
    [Match]
    MACAddress=${BETHSELAMIN_MACADDR}

    [Network]
    Address=${BETHSELAMIN_IP6ADDR}/64
    Gateway=fe80::1

    Address=172.31.1.100/24
    Gateway=172.31.1.1
"""
[[symlink]]
path   = "/usr/share/holo/files/50-bethselamin-vars/etc/systemd/network/50-hetzner.network.holoscript"
target = "/my/variables"

################################################################################
# firewall

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/ferm.service"
target = "/usr/lib/systemd/system/ferm.service"

[[file]]
path    = "/usr/share/holo/files/50-bethselamin/etc/ferm.conf"
content = """
    table filter {
        chain INPUT {
            policy DROP;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            # allow local connections
            interface lo ACCEPT;

            # respond to ping
            proto icmp icmp-type echo-request ACCEPT;

            # allow SSH, HTTP, HTTPS
            proto tcp dport ssh ACCEPT;
            proto tcp dport http ACCEPT;
            proto tcp dport https ACCEPT;
            # allow XMPP
            proto tcp dport xmpp-client ACCEPT;
            proto tcp dport xmpp-server ACCEPT;

            # allow Mumble on non-standard port
            proto tcp dport 64001 ACCEPT;
            proto udp dport 64001 ACCEPT;

            # the rest is dropped by the above policy
        }

        # outgoing connections are not limited
        chain OUTPUT policy ACCEPT;

        # this is not a router
        chain FORWARD policy DROP;
    }
"""

################################################################################
# web services: gogs

[[directory]]
path    = "/etc/gogs"
user    = "gogs"
group   = "gogs"
mode    = "0700"

[[file]]
path    = "/etc/gogs/app.ini"
content = '''
    APP_NAME = Bethselamin
    RUN_USER = gogs
    RUN_MODE = prod

    [markdown]
    FILE_EXTENSIONS = .md,.markdown,.mdown,.mkd

    [repository]
    ROOT        = /data/gogs/repo
    SCRIPT_TYPE = bash
    MIRROR_QUEUE_LENGTH = 1000
    PULL_REQUEST_QUEUE_LENGTH = 1000

    [repository.editor]
    LINE_WRAP_EXTENSIONS = .txt,.md,.markdown,.mdown,.mkd,
    PREVIEWABLE_FILE_MODES = markdown

    [repository.upload]
    ENABLED = false

    [server]
    PROTOCOL   = http
    DOMAIN     = git.bethselamin.de
    ROOT_URL   = https://git.bethselamin.de/
    HTTP_ADDR  =
    HTTP_PORT  = 3000
    SSH_DOMAIN = git.bethselamin.de
    SSH_PORT   = 22
    SSH_LISTEN_PORT  = 22
    APP_DATA_PATH    = /data/gogs
    STATIC_ROOT_PATH = /usr/share/themes/gogs/default

    [ssh.minimum_key_sizes]
    ; reject insecure keys
    DSA     = -1
    ECDSA   = -1
    ED25519 = 256
    RSA     = 4096

    [database]
    DB_TYPE = sqlite3
    PATH    = /data/gogs/sqlite.db

    [security]
    INSTALL_LOCK         = true
    SECRET_KEY           = %SECRET%
    LOGIN_REMEMBER_DAYS  = 1
    COOKIE_USERNAME      = gogs_user
    COOKIE_REMEMBER_NAME = gogs_remember

    [service]
    DISABLE_REGISTRATION = true
    REQUIRE_SIGNIN_VIEW  = true
    ENABLE_NOTIFY_MAIL   = false

    [mailer]
    ENABLED = false

    [cache]
    ADAPTER = memory

    [session]
    PROVIDER = memory

    [picture]
    AVATAR_UPLOAD_PATH = /data/gogs/avatars
    DISABLE_GRAVATAR = true

    [attachment]
    ENABLE = true
    PATH = /data/gogs/attachments
    ALLOWED_TYPES = image/jpeg|image/png

    [log]
    ; this should not be required with MODE=console, but is needed apparently because Gogs is stupid enough to choose /usr/share/gogs/log without hand-holding
    ROOT_PATH = /var/log/gogs
    MODE = console
    LEVEL = Info

    [cron]
    ENABLED = true
    RUN_AT_START = false

    [cron.update_mirrors]
    SCHEDULE = @every 1h

    [cron.repo_health_check]
    SCHEDULE = @every 24h
    TIMEOUT = 60s

    [cron.check_repo_stats]
    RUN_AT_START = true
    SCHEDULE = @every 24h

    [git]
    MAX_GIT_DIFF_LINES = 10000
    MAX_GIT_DIFF_LINE_CHARACTERS = 500
    MAX_GIT_DIFF_FILES = 100

    [git.timeout]
    MIGRATE = 600
    MIRROR  = 300
    CLONE   = 300
    PULL    = 300

    [i18n]
    LANGS = en-US,de-DE
    NAMES = English,Deutsch

    [i18n.datelang]
    en-US = en
    de-DE = de

    [other]
    SHOW_FOOTER_BRANDING = false
    SHOW_FOOTER_VERSION  = false

    [api]
    MAX_RESPONSE_ITEMS = 50
'''

[[file]]
path    = "/usr/share/holo/files/50-bethselamin/etc/gogs/app.ini.holoscript"
mode    = "0755"
content = '''
    #!/bin/sh
    set -e
    mkdir -p /var/lib/gogs
    test -f /var/lib/gogs/secret || pwgen 20 1 > /var/lib/gogs/secret
    sed s/%SECRET%/"$(cat /var/lib/gogs/secret)"/
'''

[[directory]]
path = "/data/gogs"
user = "gogs"
group = "gogs"
mode = "0770" # group-readable for backup user

[[file]]
path    = "/etc/systemd/system/gogs.service.d/paths.conf"
content = '''
    [Service]
    WorkingDirectory=/data/gogs/
    ExecStart=
    ExecStart=/usr/share/gogs/gogs web --config /etc/gogs/app.ini
'''

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/gogs.service"
target = "/usr/lib/systemd/system/gogs.service"

[[file]]
path    = "/etc/nginx/sites-enabled/gogs.conf"
content = '''
    server {
        server_name git.bethselamin.de;
        include     /etc/nginx/server-baseline-https.inc;

        add_header  Content-Security-Policy "default-src 'self'" always;

        ssl_certificate     /etc/letsencrypt/live/git.bethselamin.de/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/git.bethselamin.de/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/git.bethselamin.de/chain.pem;

        client_max_body_size 10m;

        location / {
            proxy_pass http://localhost:3000;
        }
    }
'''

################################################################################
# backup for /data

# TODO: move /var/lib/prosody to /data to be included in backup

[[user]]
name  = "backup"
group = "gogs"
groups = ["prosody"]
home  = "/var/lib/backupuser"

[[file]]
path    = "/usr/share/holo/ssh-keys/backup/damogran.pub"
content = """
    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDIG9MGVFKSc73k4RF3eyYPojbRIdGcPQLgN1t0NcWW4iXpzyBSevE/C4YUpjgxghZmO1VtQa0VQPFy3TDCUUMp8MKVI/WmmFQprVtwAMVGUDpNt7TEcBZXzTCA+GiSMhcA4y3xme5BJy0r9oKtmQAhVIQKO0jYye4cdPVsYmRVMZba4JWlNVJZRIMVjwg98NdvLbqjVgph+es5EYh8uluvCzDvoC1RuTNljAVyUjmdOHe3nWBE3N4EMCnp/XnYigtbcwSpSq2oJ2Yu1B9E5sk3rjgDv5inmF3eykLLDkE85fusvRAcHkirbKQuUg2x0vm8FHy3U1TnX3wizdfIBE8bkpJAMcEBoY8cIEL45od+7lS3R4S3KOwWwzE5reYv4WjPcGbNuYls9sHS72wDDNr3N6SgTTDJJRWRfo3QiVZV8DYaHVOJJYAGL6OUfRAAT3+1QGY5x8zQeVayjeqAQ89ukyRtkgYECyHZYVDkmqw+t/OwElyHNuWm6tn1s/TGVdd9XBrrHwwxPY+DuquND7zaqkDSc491DsCE/7LT81DOfzcpraZAE9RBB2P05FpbvOLHXxhiCigTBKmo5GZ1WUEesYj9X/RTA6rPB5NlOw8BxU8EIfQI1/KfumNSIR02GhueG7t0647GekUARlwpk/YMNftRpqjlPRCRoTNxvDRh/Q== bethselaminbackup@damogran
"""

################################################################################
# web services: repo.holocm.org

[[directory]]
path  = "/data/static-web/repo.holocm.org"
owner = "stefan"
group = "users"
# this tree is world-readable for the nginx and backup users
mode  = "0755"

# nginx configuration is generated by sites-enabled/static-web.conf in hologram-nginx

################################################################################
# web services: todolist

[[file]]
path    = "/etc/nginx/sites-enabled/todolist.conf"
content = '''
    server {
        server_name todolist.bethselamin.de;
        include     /etc/nginx/server-baseline-https.inc;

        add_header  Content-Security-Policy "default-src 'self' 'unsafe-inline'" always; # unsafe-inline for <style> tag to work

        ssl_certificate     /etc/letsencrypt/live/todolist.bethselamin.de/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/todolist.bethselamin.de/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/todolist.bethselamin.de/chain.pem;

        location / {
            proxy_pass http://localhost:8113;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
        }
    }

'''

[[group]]
name   = "todolist"
system = true

[[user]]
name   = "todolist"
group  = "todolist"
system = true
home   = "/var/lib/todolist"

[[directory]]
path  = "/var/lib/todolist"
owner = "todolist"
group = "todolist"

[[file]]
path    = "/usr/lib/systemd/system/todolist.service"
content = """
    [Unit]
    Description=Minimalistic web-based todolist app

    [Service]
    ExecStart=/usr/bin/todolist -port 8113
    WorkingDirectory=/var/lib/todolist
    User=todolist

    [Install]
    WantedBy=multi-user.target
"""

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/todolist.service"
target = "/usr/lib/systemd/system/todolist.service"

################################################################################
# web services: ages-skripte.org

[[file]]
path    = "/etc/nginx/sites-enabled/ages-website.conf"
content = '''
    # redirect ages-skripte.org (without www) to www.ages-skripte.org
    server {
        server_name ages-skripte.org;
        listen 80;
        listen [::]:80;

        location / {
            return 301 https://www.ages-skripte.org$request_uri;
        }
    }

    server {
        server_name www.ages-skripte.org;
        include     /etc/nginx/server-baseline-https.inc;

        add_header  Content-Security-Policy "default-src 'self' 'unsafe-inline'" always; # unsafe-inline for <style> tag to work

        ssl_certificate     /etc/letsencrypt/live/www.ages-skripte.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.ages-skripte.org/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/www.ages-skripte.org/chain.pem;

        location / {
            root /usr/share/ages-website/;
        }
    }

'''

################################################################################
# web services: blog.bethselamin.de

[[user]]
name   = "blog"
group  = "nobody"
system = true

[[directory]]
path  = "/data/blog"
owner = "blog"
group = "nobody"

[[directory]]
path  = "/data/blog/output"
owner = "blog"
group = "nobody"

[[symlink]]
path   = "/data/static-web/blog.bethselamin.de"
target = "/data/blog/output"

[[file]]
path    = "/usr/lib/blog-update.sh"
mode    = "0755"
content = '''
    #!/bin/bash
    cd /data/blog
    if [ -d posts ]; then
        git -C posts pull origin master
    else
        git clone https://github.com/majewsky/blog-data posts
    fi
    blog-generator
'''

[[file]]
path = "/usr/lib/systemd/system/blog-update.service"
content = '''
    [Unit]
    Description=Update blog.bethselamin.de

    [Service]
    Type=oneshot
    ExecStart=/usr/lib/blog-update.sh
    User=blog
    Group=nobody
'''

[[file]]
path = "/usr/lib/systemd/system/blog-update.timer"
content = '''
    [Unit]
    Description=Update blog.bethselamin.de every five minutes

    [Timer]
    OnStartupSec=2min
    OnUnitInactiveSec=5min
'''

################################################################################
# misc. services: Mumble/Murmur

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/murmur.service"
target = "/usr/lib/systemd/system/murmur.service"

[[file]]
path = "/etc/letsencrypt-allofthem/mumble.sh"
mode = "0755"
content = '''
    #!/bin/sh
    grep -o '/etc/letsencrypt/live/[^/]\+' /etc/murmur.ini | cut -d/ -f5 | sort -u
'''

# TODO: add "murmurd -ini /etc/murmur.ini -supw <password>" to setupScript to set the super-user password (problem: cannot interpolate /my/variables into setupScript)

[[file]]
path    = "/usr/share/holo/files/50-bethselamin/etc/murmur.ini"
content = '''
    # database
    database=/var/lib/murmur/murmur.sqlite

    # runtime
    uname=murmur
    dbus=system

    # connection (non-standard port for historical reasons)
    port=64001
    sslCert=/etc/letsencrypt/live/${MURMUR_DOMAIN}/fullchain.pem
    sslKey=/etc/letsencrypt/live/${MURMUR_DOMAIN}/privkey.pem
    # SSL cipher suite from https://wiki.mozilla.org/Security/Server_Side_TLS
    sslCipher=ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

    # limits
    serverpassword=${MURMUR_SERVERPASSWORD}
    bandwidth=72000 # bits/sec per user
    users=100       # max. number of users

    # strings
    welcometext="${MURMUR_WELCOME_TEXT}"
    allowhtml=false
'''
[[symlink]]
path   = "/usr/share/holo/files/50-bethselamin-vars/etc/murmur.ini.holoscript"
target = "/my/variables"
